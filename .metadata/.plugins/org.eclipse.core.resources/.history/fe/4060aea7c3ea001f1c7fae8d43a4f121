package com.cart.api.service;

import java.util.ArrayList;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.client.RestTemplate;

import com.cart.api.dto.Product;
import com.cart.api.entity.Cart;
import com.cart.api.entity.CartItem;
import com.cart.api.repository.CartItemRepository;
import com.cart.api.repository.CartRepository;

@Service
public class CartService {

	@Autowired
	private CartRepository cartRepository;
	
	@Autowired
	private RestTemplate restTemplate;
	
	@Autowired
	private CartItemRepository cartItemRepository;
	
	
	/**
     * Get the cart for a specific user. If the cart doesn't exist, create a new one.
     */
	
	public Cart getOrCreateCart(Long userId) {
		
		return cartRepository.findByUserId(userId).orElseGet(() -> {
			Cart newCart = new Cart();
			newCart.setUserId(userId);
			newCart.setCartItems(new ArrayList<>());
			return cartRepository.save(newCart);
		});
		
	}
	
//	@Transactional
//	public Cart addProductToCart(Long userId, Long productId, int quantity) {
//		Cart cart = getOrCreateCart(userId);
//		
//		System.out.println(cart);
//		
//		Product product = restTemplate.getForObject("http://localhost:8080/product/byid/"+productId, Product.class);
//		
//		System.out.println(product);
//		Optional<CartItem> existingItem = cartItemRepository.findByProductId(productId);
//		
//		if(existingItem.isPresent()) {
//			System.out.println(existingItem.get());
//			CartItem citem = existingItem.get();
//			int q = citem.getQuantity();
//			citem.setQuantity(quantity+q);
//			cartItemRepository.save(citem);
//			
//		}else {
//			CartItem cartItem = new CartItem();
//			cartItem.setProductId(productId);
//			cartItem.setQuantity(quantity);
//			cartItem.setCart(cart);
//			System.out.println(cart);
//			
//			cartItemRepository.save(cartItem);
//			
//		}
//		System.out.println(cart);
//	        return cartRepository.findById(cart.getId()).get();
//		
//	}
	
	@Transactional
	public Cart addProductToCart(Long userId, Long productId, int quantity) {
	    Cart cart = getOrCreateCart(userId);
	    
	    System.out.println("Cart Before Adding: " + cart);
	    
	    Product product = restTemplate.getForObject("http://localhost:8080/product/byid/" + productId, Product.class);
	    
	    System.out.println("Product Retrieved: " + product);
	    
	    Optional<CartItem> existingItem = cart.getCartItems().stream()
	            .filter(item -> item.getProductId().equals(productId))
	            .findFirst();

	    if (existingItem.isPresent()) {
	        CartItem citem = existingItem.get();
	        citem.setQuantity(citem.getQuantity() + quantity);
	        cartItemRepository.save(citem);
	    } else {
	        CartItem cartItem = new CartItem();
	        cartItem.setProductId(productId);
	        cartItem.setQuantity(quantity);
	        cartItem.setCart(cart);
	        
	        cart.getCartItems().add(cartItem); // ðŸ”¥ Important step
	        
	        cartItemRepository.save(cartItem);
	    }
	    
	    cart = cartRepository.findById(cart.getId()).orElseThrow();
	    
	    System.out.println("Cart After Adding: " + cart);
	    return cart;
	}
	
	public Cart removeCartProduct(Long userId,Long productId) {
		
		Cart cart = getOrCreateCart(userId);
		Optional<CartItem> citem =	cart.getCartItems().stream().filter(item -> item.getProductId()==productId).findFirst();
		
		if(citem.isEmpty()) {
			throw new RuntimeException("Cart item not found");
		}else {
			cartItemRepository.deleteById(citem.get().getId());	
		}
		
		cart.getCartItems().removeIf(item -> item.getProductId()==productId);
		
		return cartRepository.save(cart);
	}
	
	public Cart getCart(Long userId) {
		return getOrCreateCart(userId);
	}
}
