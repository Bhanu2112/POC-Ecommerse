package com.gateway.poc.filter;

import java.util.List;
import java.util.function.Predicate;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.gateway.filter.GatewayFilter;
import org.springframework.cloud.gateway.filter.GatewayFilterChain;
import org.springframework.http.server.reactive.ServerHttpRequest;
import org.springframework.web.server.ServerWebExchange;

import com.gateway.poc.util.JwtService;

import reactor.core.publisher.Mono;

public class JwtAuthenticationFilter implements GatewayFilter{
	
	@Autowired
	private JwtService jwtService;

	@Override
	public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {
		 ServerHttpRequest request = exchange.getRequest();

	        final List<String> apiEndpoints = List.of("/v1/auth/login", "/v1/auth/register", "/eureka");

	        Predicate<ServerHttpRequest> isApiSecured = r -> apiEndpoints.stream()
	                .noneMatch(uri -> r.getURI().getPath().contains(uri));

	        if (isApiSecured.test(request)) {
	            if (authMissing(request)) return onError(exchange);

	            String token = request.getHeaders().getOrEmpty("Authorization").get(0);

	            if (token != null && token.startsWith("Bearer ")) token = token.substring(7);

	            try {
	                jwtUtil.validateToken(token);
	            } catch (Exception e) {
	                return onError(exchange);
	            }
	        }
	        return chain.filter(exchange);
	}

}
